/*
 * UrlAPI
 * URL shortener REST API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Line;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class LineApi {
    private ApiClient localVarApiClient;

    public LineApi() {
        this(Configuration.getDefaultApiClient());
    }

    public LineApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for getURL
     * @param fullUrl Short URL to return (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid link </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getURLCall(String fullUrl, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/getUrl/"
            .replaceAll("\\{" + "FullUrl" + "\\}", localVarApiClient.escapeString(fullUrl.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getURLValidateBeforeCall(String fullUrl, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'fullUrl' is set
        if (fullUrl == null) {
            throw new ApiException("Missing the required parameter 'fullUrl' when calling getURL(Async)");
        }
        

        okhttp3.Call localVarCall = getURLCall(fullUrl, _callback);
        return localVarCall;

    }

    /**
     * Get new short url
     * 
     * @param fullUrl Short URL to return (required)
     * @return Line
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid link </td><td>  -  </td></tr>
     </table>
     */
    public Line getURL(String fullUrl) throws ApiException {
        ApiResponse<Line> localVarResp = getURLWithHttpInfo(fullUrl);
        return localVarResp.getData();
    }

    /**
     * Get new short url
     * 
     * @param fullUrl Short URL to return (required)
     * @return ApiResponse&lt;Line&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid link </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Line> getURLWithHttpInfo(String fullUrl) throws ApiException {
        okhttp3.Call localVarCall = getURLValidateBeforeCall(fullUrl, null);
        Type localVarReturnType = new TypeToken<Line>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get new short url (asynchronously)
     * 
     * @param fullUrl Short URL to return (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid link </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getURLAsync(String fullUrl, final ApiCallback<Line> _callback) throws ApiException {

        okhttp3.Call localVarCall = getURLValidateBeforeCall(fullUrl, _callback);
        Type localVarReturnType = new TypeToken<Line>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postNewURL
     * @param line Ner url needs to be added into the database (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 405 </td><td> Invalid input </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postNewURLCall(Line line, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = line;

        // create path and map variables
        String localVarPath = "/getUrl/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postNewURLValidateBeforeCall(Line line, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'line' is set
        if (line == null) {
            throw new ApiException("Missing the required parameter 'line' when calling postNewURL(Async)");
        }
        

        okhttp3.Call localVarCall = postNewURLCall(line, _callback);
        return localVarCall;

    }

    /**
     * Add a new line into database
     * 
     * @param line Ner url needs to be added into the database (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 405 </td><td> Invalid input </td><td>  -  </td></tr>
     </table>
     */
    public void postNewURL(Line line) throws ApiException {
        postNewURLWithHttpInfo(line);
    }

    /**
     * Add a new line into database
     * 
     * @param line Ner url needs to be added into the database (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 405 </td><td> Invalid input </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> postNewURLWithHttpInfo(Line line) throws ApiException {
        okhttp3.Call localVarCall = postNewURLValidateBeforeCall(line, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Add a new line into database (asynchronously)
     * 
     * @param line Ner url needs to be added into the database (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 405 </td><td> Invalid input </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postNewURLAsync(Line line, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = postNewURLValidateBeforeCall(line, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
